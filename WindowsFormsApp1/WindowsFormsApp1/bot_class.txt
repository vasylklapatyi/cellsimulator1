
//...............  сменить направление абсолютно   ....
			if ($command == 24)
			{ // записываем новое значение направления
				bots[$bot, DIRECT]= mod(bot_get_param($bot),8)  // берем следующий байт и вычисляем остаток от деления на 8
				bot_inc_command_address( $bot, 2 )              // адрес текущей команды увеличивается на 2, 
																// перепрыгивая выполненную команду и параметр
				go ag                                           // возвращаемся назад к выполнению следующей команды
			} 
      
			if ($command == 27)
			{
				$a = isMulti($bot) 
				if $a==0
				{ 
					$drct = mod(bot_get_param($bot),8)
					bot_indirect_inc_cmd_address( $bot, bot_move($bot,$drct,1) )
				}
				go out
			} 
//************************************************************************		   
//..............   съесть в относительном напралении       ...............
			if ($command == 28)
			{  
				$drct = mod(bot_get_param($bot),8)       // вычисляем направление из следующего за командой байта
				bot_indirect_inc_cmd_address( $bot,  bot_eat($bot,$drct,0) )// меняем адрес текущей команды
				// в зависимости от того, что было в этом направлении
				//смещение условного перехода  стена - 2 пусто - 3 органика - 4 живой - 5
				go out // выходим, так как команда шагнуть - завершающая
			}           // после её выполнения, управление передаётся следующему боту
//..............   съесть  в абсолютном направлении      ...............
			if ($command == 29)
			{  //смещение условного перехода  стена - 2 пусто - 3 органика - 4 живой - 5
				$drct = mod(bot_get_param($bot),8)
				bot_indirect_inc_cmd_address( $bot,  bot_eat($bot,$drct,1) )
				go out
			} 
//******************************************************************************************		   
//.............   посмотреть  в относительном напралении ...................................
			if ($command == 30) 
			{
				$drct = mod(bot_get_param($bot),8)    // вычисляем направление из следующего за командой байта
				bot_indirect_inc_cmd_address( $bot, bot_see_bots($bot, $drct,0) )// меняем адрес текущей команды
				// в зависимости от того, что было в этом направлении
				// пусто - 2 стена - 3 органик - 4 бот -5 родня -  6
				go ag    // возвращаемся назад к выполнению следующей команды
			}  
//.............   посмотреть в абсолютном направлении ...................................
			if ($command == 31)// пусто - 2 стена - 3 органик - 4 бот -5 родня -  6
			{
				$drct = mod(bot_get_param($bot),8) 
				bot_indirect_inc_cmd_address( $bot, bot_see_bots($bot, $drct,1) )
				go ag
			}                 
			
//******************************************************************************  
// делиться - если у бота больше энергии или минералов, чем у соседа, то они распределяются поровну          
//.............   делится   в относительном напралении  ........................
			if (($command == 32) || ($command == 42))    // здесь я увеличил шансы появления этой команды                   
			{ 
				$drct = mod(bot_get_param($bot),8) 	// вычисляем направление из следующего за командой байта
				bot_indirect_inc_cmd_address( $bot, bot_care($bot, $drct,0 ) ) // меняем адрес текущей команды
				// в зависимости от того, что было в этом направлении
				// стена - 2 пусто - 3 органика - 4 удачно - 5   
				go ag     // возвращаемся назад к выполнению следующей команды
			}
 //.............   делится  в абсолютном направлении ........................
			if (($command == 33) || ($command == 51))     // здесь я увеличил шансы появления этой команды                    
			{ 
				$drct = mod(bot_get_param($bot),8) 	
				bot_indirect_inc_cmd_address( $bot, bot_care($bot, $drct,1 ) )  // стена - 2 пусто - 3 органика - 4 удачно - 5    
				go ag
			}
//****************************************************************************
// отдать - безвозмездно отдать часть энергии и минералов соседу			
//.............   отдать   в относительном напралении  ........................
			if (($command == 34) || ($command == 50) )     // здесь я увеличил шансы появления этой команды                    
			{ 
				$drct = mod(bot_get_param($bot),8) 	// вычисляем направление из следующего за командой байта
				bot_indirect_inc_cmd_address( $bot, bot_give($bot, $drct,0 ) ) // меняем адрес текущей команды
				// в зависимости от того, что было в этом направлении  
				// стена - 2 пусто - 3 органика - 4 удачно - 5  
				go ag    // возвращаемся назад к выполнению следующей команды
			} 
//.............   отдать  в абсолютном направлении  ........................
			if (($command == 35) || ($command == 52) )       // здесь я увеличил шансы появления этой команды                    
			{ 
				$drct = mod(bot_get_param($bot),8) 	
				bot_indirect_inc_cmd_address( $bot, bot_give($bot, $drct,1 ) ) // стена - 2 пусто - 3 органика - 4 удачно - 5     
				go ag
			}
                  
//*********************************************************************************                  
//...................   выравнится по горизонтали  ...............................
			if ($command == 36)
			{	if (mod(rand(),2)==0)              // кидаем монетку
					{ bots[$bot, DIRECT] = 3 }   // если ноль, то поворачиваем в одну сторону
				else  
					{ bots[$bot, DIRECT] = 7 }   // если один, то поворачиваем в другую сторону
				bot_inc_command_address( $bot, 1 )// увеличиваем указатель текущей команды на 1
				go ag  // возвращаемся назад к выполнению следующей команды
			}   

//***********************************************************************			
//...................  какой мой уровень (на какой высоте бот)  .........
			if ($command == 37)
			{   // у меня поле высотой в 96 клеток
				// байт в геноме может иметь значение от 0 до 63
				// умножая значение байта на 1,5 получаем значение от 0 до 95
				$param = bot_get_param($bot)*1.5   // берем следующий за командой байт и умножаем на 1,5
				// если уровень бота ниже, чем полученное значение,
				// то прибавляем к указатели текущей команды значение 2-го байта, после выполняемой команды
				if (bots[$bot, Y_COORD] < $param ) 
					{ bot_indirect_inc_cmd_address( $bot , 2 ) }
				// иначе прибавляем к указатели текущей команды значение 3-го байта, после выполняемой команды
				else
					{ bot_indirect_inc_cmd_address( $bot , 3 ) } 
				go ag  // возвращаемся назад к выполнению следующей команды
			}          
//**************************************************************************        
//...................  какое моё здоровье  ...............................
			if ($command == 38)
			{   // максимальное здоровье  999
				// байт в геноме может иметь значение от 0 до 63
				// умножая значение байта на 15 получаем значение от 0 до 945
				$param = bot_get_param($bot)*15   // берем следующий за командой байт и умножаем на 15
				// если здоровье бота ниже, чем полученное значение,
				// то прибавляем к указатели текущей команды значение 2-го байта, после выполняемой команды
				if (bots[$bot, HEALTH] < $param )
					{ bot_indirect_inc_cmd_address( $bot, 2 ) }
				// иначе прибавляем к указатели текущей команды значение 3-го байта, после выполняемой команды
				else
					{ bot_indirect_inc_cmd_address( $bot, 3 ) }
				go ag  // возвращаемся назад к выполнению следующей команды
			}              
//*********************************************************************
//...................сколько  минералов ...............................
			if ($command == 39)
			{ 			  
				$param = bot_get_param($bot)*15 
				if (bots[$bot, MINERAL] < $param )
					{ bot_indirect_inc_cmd_address( $bot, 2 ) }
				else
					{ bot_indirect_inc_cmd_address( $bot, 3 ) }
				go ag
			} 
//****************************************************************************
//...........  многоклеточность ( создание потомка, приклееного к боту )......
			if ($command == 40)  
			{   // функция isMulti() возвращает 
				// 0 - если бот не входит в многоклеточную цепочку
				// 1 или 2 - если бот является крайним в цепочке
				// 3 - если бот внутри цепочки
				$a= isMulti($bot)    // 0 - нету, 1 - есть MPREV, 2 - есть MNEXT, 3 есть MPREV и MNEXT 
				if ($a==3)   { bot_double($bot)}     // если бот уже находится внутри цепочки, то новый бот рождается свободным
				else         { bot_multi($bot) }     // в другом случае, новый бот рождается приклеенным к боту-предку   
				bot_inc_command_address( $bot, 1 )   // увеличиваем адрес текущей команды на 1
				go out// выходим, так как команда родить - завершающая
			}           // после её выполнения, управление передаётся следующему боту
  	
//...............  деление (создание свободноживущего потомка) ................
			if ($command == 41)      
			{
				$a= isMulti($bot)
				if ($a==0) || ($a==3)   { bot_double($bot)} // если бот свободный или внутри цепочки, , то новый бот рождается свободным
				else                    { bot_multi($bot) } // если бот крайний в цепочке, новый бот рождается приклеенным к боту-предку 
				bot_inc_command_address( $bot, 1 )
				go out
			}  	
//****************************************************    		
//...............  окружен ли бот    ................
			if ($command == 43)   
			{   // функция full_aroud() возвращает  1, если бот окружен и 2, если нет 
				// увеличиваем значение указателя текущей команды 
				// на значение следующего байта после команды или 2-го байта после команды
				// в зависимости от того, окружен бот или нет
				bot_indirect_inc_cmd_address( $bot, full_aroud($bot) ) // 
				go ag  // возвращаемся назад к выполнению следующей команды
			} 
//.............. приход энергии есть? ........................
			if ($command == 44)  
			{  // is_health_grow() возвращает 1, если энегрия у бота прибавляется, иначе - 2
				bot_indirect_inc_cmd_address( $bot, is_health_grow($bot) ) 
				go ag // возвращаемся назад к выполнению следующей команды
			}
//******************************************************************
//............... минералы прибавляются? ............................
			if ($command == 45)  
			{  // если глубина, на которой расположен бот больше 48, то он начинает накапливать минералы
				if ( bots[ $bot , Y_COORD ] > 48 )  { bot_indirect_inc_cmd_address( $bot, 1 ) } 
				else                                { bot_indirect_inc_cmd_address( $bot, 2 ) }
				go ag // возвращаемся назад к выполнению следующей команды
			}
//*************************************************************
//.............. многоклеточный ли я ? ........................ 
			if ($command == 46)  
			{  
				$mu=isMulti($bot)
				if ( $mu == 0)    { bot_indirect_inc_cmd_address( $bot, 1 ) } // бот свободно живущий
				else
				{
					if ( $mu == 3) { bot_indirect_inc_cmd_address( $bot, 3 ) } // бот внутри цепочки
					else           { bot_indirect_inc_cmd_address( $bot, 2 ) } // бот скраю цепочки       
				}
				go ag // возвращаемся назад к выполнению следующей команды
			}
//**********************************************************************
//.................. преобразовать минералы в энерию ...................
			if ($command == 47) 
			{
				bot_mineral2energy($bot)
				bot_inc_command_address( $bot, 1 )
				go out      // выходим, так как команда - завершающая
				// после её выполнения, управление передаётся следующему боту
			}
//*********************************************************************
//................      мутировать   ................................... 
// спорная команда, во время её выполнения меняются случайным образом две случайные команды 
// читал, что микроорганизмы могут усилить вероятность мутации своего генома в неблагоприятных условиях       
			if ($command == 48)
			{   
				$ma= rand() div 520 
				$mc= rand() div 520
				bots[$bot ,$ma]=$mc

				$ma= rand() div 520 
				$mc= rand() div 520
				bots[$bot ,$ma]=$mc
				bot_inc_command_address( $bot, 1 )
				go out     // выходим, так как команда мутировать - завершающая
			}              // после её выполнения, управление передаётся следующему боту
           
//*********************************************************************		 
//................   генная атака  ...................................
			if ($command == 49)
			{  // бот атакует геном соседа, на которого он повернут
				bot_gen_attack($bot) // случайным образом меняет один байт
				bot_inc_command_address( $bot, 1 )
				go out// выходим, так как команда мутировать - завершающая
			}        // после её выполнения, управление передаётся следующему боту
//=======================================================================                              
//................    если ни с одной команд не совпало ................. 
//................    значит безусловный переход        .................
//.....   прибавляем к указателю текущей команды значение команды   .....
			bot_inc_command_address( $bot, $command )          
			go ag  // возвращаемся назад к выполнению следующей команды
		}
		
		
out:
//###########################################################################		
//.......  выход из функции и передача управления следующему боту   ........
//.......  но перед выходом нужно проверить, входит ли бот в        ........
//.......  многоклеточную цепочку и если да, то нужно распределить  ........
//.......  энергию и минералы с соседями                            ........
//.......  также проверить, количество накопленой энергии, возможно ........
//.......  пришло время подохнуть или породить потомка              ........
      
		if ( bots[ $bot, LIVING ] == LV_ALIVE )
		{
			$a= isMulti($bot)
			// распределяем энергию  минералы по многоклеточному организму
			// возможны три варианта, бот находится внутри цепочки
			// бот имеет предыдущего бота в цепочке и не имеет следующего
			// бот имеет следующего бота в цепочке и не имеет предыдущего
			if ( $a==3 )                  // бот находится внутри цепочки
			{   
				$pb = bots[ $bot, MPREV ] // ссылка на предыдущего бота в цепочке
				$nb = bots[ $bot, MNEXT ] // ссылка на следующего бота в цепочке
               // делим минералы .................................................................
				$m =  bots[ $bot , MINERAL ] + bots[ $nb , MINERAL ] + bots[ $pb , MINERAL ] // общая сумма минералов
				//распределяем минералы между всеми тремя ботами
				$m1= mod( $m , 3 )
				$m = $m div 3           
				bots[ $bot , MINERAL ] = $m + $m1
				bots[ $nb  , MINERAL ] = $m
				bots[ $pb  , MINERAL ] = $m
				// делим энергию ................................................................
				// проверим, являются ли следующий и предыдущий боты в цепочке крайними .........
				// если они не являются крайними, то распределяем энергию поровну       .........
				// связанно это с тем, что в крайних ботах в цепочкедолжно быть больше энергии ..
				// что бы они плодили новых ботов и удлиняли цепочку
				$apb = isMulti($pb) $anb = isMulti($nb) 
				if ( $anb == 3 ) && ( $apb == 3 ) // если следующий и предыдущий боты не являются крайними
				{                                 // то распределяем энергию поровну
					$h =  bots[ $bot , HEALTH ] + bots[ $nb , HEALTH ] + bots[ $pb , HEALTH ] 
					$h1= mod( $h , 3 )
					$h = $h div 3
					bots[ $bot , HEALTH ] = $h + $h1
					bots[ $nb  , HEALTH ] = $h
					bots[ $pb  , HEALTH ] = $h
				}  
			}
			// бот является крайним в цепочке и имеет предыдкщего бота
			if $a==1
			{
				$pb = bots[ $bot, MPREV ] // ссылка на предыдущего бота
				$apb = isMulti($pb) // проверим, является ли предыдущий бот крайним в цепочке
				if ( $apb == 3 )    // если нет, то распределяем энергию в пользу текущего бота
				{                   // так как он крайний и ему нужна энергия для роста цепочки
					$h =  bots[ $bot , HEALTH ] + bots[ $pb , HEALTH ] 
					$h1= mod( $h , 4 )
					$h = $h div 4
					bots[ $bot , HEALTH ] = $h*3
					bots[ $pb  , HEALTH ] = $h + $h1	
				}			   
			}
			// бот является крайним в цепочке и имеет следующего бота
			if $a==2
			{
				$nb = bots[ $bot, MNEXT ] // ссылка на следующего бота
				$anb = isMulti($nb)    // проверим, является ли следующий бот крайним в цепочке
				if ( $anb == 3 )       // если нет, то распределяем энергию в пользу текущего бота
				{                      // так как он крайний и ему нужна энергия для роста цепочки
					$h =  bots[ $bot , HEALTH ] + bots[ $nb , HEALTH ] 
					$h1= mod( $h , 4 )
					$h = $h div 4
					bots[ $bot , HEALTH ] = $h*3
					bots[ $nb  , HEALTH ] = $h + $h1
				}			   
			} 
	//... проверим уровень энергии у бота, возможно пришла пора помереть или родить
			if ( bots[ $bot , HEALTH ] > 999 ) 
			{    // если энергии больше 999, то плодим нового бота
				if ($a==1) || ($a==2)   { bot_multi($bot) } // если бот был крайним в цепочке, то его потомок входит в состав цепочки
				else                    { bot_double($bot)} // если бот был свободным или находился внутри цепочки
			}                                               // то его потомок рождается свободным
			bots[ $bot , HEALTH ] =  bots[ $bot , HEALTH ] - 3   // каждый ход отнимает 3 единички здоровья(энегрии)
			if ( bots[ $bot , HEALTH ] < 1 )                     // если энергии стало меньше 1
			{                                                    
				bot2organic($bot)                                // то время умирать, превращаясь в огранику
				ret( bots[ $bot , NEXT ] )                       // и передаем управление к следующему боту
			}
            // если бот находится на глубине ниже 48 уровня
			// то он автоматом накапливает энергию, но не более 999
			if ( bots[ $bot , Y_COORD ] > 48 )                   
			{ bots[$bot,MINERAL]=bots[$bot,MINERAL] + 1
				if ( bots[ $bot , Y_COORD ] > 66 ) { bots[$bot,MINERAL]=bots[$bot,MINERAL] + 1 }
				if ( bots[ $bot , Y_COORD ] > 84 ) { bots[$bot,MINERAL]=bots[$bot,MINERAL] + 1 }
				if ( bots[ $bot , MINERAL ]>999) { bots[ $bot , MINERAL ] = 999 }
			}
		}  
       ret( bots[ $bot , NEXT ] ) // выход и передаем управление следующему боту
	}
   
 
 

//=========================================================================================
//============================       КОД КОМАНД   =========================================
//=========================================================================================
// ...  фотосинтез, этой командой забит геном первого бота     ...............
// ...  бот получает энергию солнца в зависимости от глубины   ...............
// ...  и количества минералов, накопленных ботом              ...............
fn bot_eat_sun($bot)
	{   
		if ( bots[ $bot , MINERAL ] < 100 )
			{ $t = 0 }
		else 
			{
				if ( bots[ $bot , MINERAL ] < 400 ) { $t = 1 }
				else                                { $t = 2 }
			}
		$hlt = season - ( (bots[ $bot , Y_COORD ]-1) div 6 ) + $t // формула вычисления энергии
		if ($hlt > 0) 
			{ 
				bots[ $bot , HEALTH ] =  bots[ $bot , HEALTH ] + $hlt   // прибавляем полученную энергия к энергии бота
				go_GREEN($bot,$hlt)                                     // бот от этого зеленеет
			}
	}
     
// ...  преобразование минералов в энергию  ...............
fn  bot_mineral2energy ($bot)
	{  
		if ( bots[ $bot , MINERAL ] > 100 )
			{   // максимальное количество минералов, которые можно преобразовать в энергию = 100
				bots[ $bot , MINERAL ] = bots[ $bot , MINERAL ] - 100
				bots[ $bot , HEALTH  ] = bots[ $bot , HEALTH  ] + 400 // 1 минерал = 4 энергии
				go_BLUE($bot,100)  // бот от этого синеет
			}
		else
			{  // если минералов меньше 100, то все минералы переходят в энергию
				go_BLUE($bot, bots[ $bot , MINERAL ] )
				bots[ $bot , HEALTH  ] = bots[ $bot , HEALTH ] + 4*bots[ $bot , MINERAL ]
				bots[ $bot , MINERAL ] = 0
			}    
	}
//===========================  перемещение бота   ========================================
 fn  bot_move($bot,$dr,$ra) // на входе ссылка на бота, направлелие и флажок(относительное или абсолютное направление)
	{                       // на выходе   2-пусто  3-стена  4-органика 5-бот 6-родня
		if $ra == 0  // вычисляем координату клетки, куда перемещается бот (относительное направление)
		{ 
			$x = X_from_vektor_r( $bot, $dr )   
			$y = Y_from_vektor_r( $bot, $dr ) 
		}
		else        // вычисляем координату клетки, куда перемещается бот (абсолютное направление)
		{ 
			$x = X_from_vektor_a( $bot, $dr )   
			$y = Y_from_vektor_a( $bot, $dr ) 
		} 
		if ( world[$x,$y] == WC_EMPTY )  // если клетка была пустая, 
		{ 
			move_bot( $bot , $x, $y )    // то перемещаем бота
			ret(2)                       // и функция возвращает 2     
		}
		if ( world[$x,$y] == WC_WALL )   // если там была стена
		{ 
			ret(3)                       // то возвращаем 3
		}
		// осталось 2 варианта: ограника или бот
		if ( bots[ world[$x,$y], LIVING ] <= LV_ORGANIC_SINK ) // если на клетке находится органика 
		{
			ret(4)                       // то возвращаем 4
		} 
		if ( is_relative($bot,world[$x,$y]) == 1)  // если на клетке родня
		{
			ret(6)                      // то возвращаем 6
		} 
		else                            // остался только один вариант - на клетке какой-то бот
		{ 
			ret(5)                      // возвращаем 5
		}                                                       
	} 

//============================    скушать другого бота или органику  ==========================================
 fn  bot_eat($bot,$dr,$ra)// на входе ссылка на бота, направлелие и флажок(относительное или абсолютное направление)
	{                     // на выходе пусто - 2  стена - 3  органик - 4  бот - 5
		bots[ $bot, HEALTH ] =  bots[ $bot, HEALTH ] - 4 // бот теряет на этом 4 энергии в независимости от результата
		if $ra == 0  // вычисляем координату клетки, с которой хочет скушать бот (относительное направление)
		{ 
			$x = X_from_vektor_r( $bot, $dr )   
			$y = Y_from_vektor_r( $bot, $dr ) 
		}
		else        // вычисляем координату клетки, с которой хочет скушать бот (абсолютное направление)
		{ 
			$x = X_from_vektor_a( $bot, $dr )   
			$y = Y_from_vektor_a( $bot, $dr ) 
		} 
		if ( world[$x,$y] == WC_EMPTY ) //если там было пусто
		{ 
			ret(2)                      // то возвращаем 2
		}     
		if ( world[$x,$y] ==  WC_WALL ) // если там была стена
		{ 
			ret(3)                      // то возвращаем 3
		}
		// осталось 2 варианта: ограника или бот
		if ( bots[ world[$x,$y], LIVING ] <= LV_ORGANIC_SINK )   // если там оказалась органика
		{
			delete_bot( world[$x,$y] )                           // то удаляем её из списков
			bots[ $bot , HEALTH ] =  bots[ $bot , HEALTH ] + 100 //здоровье увеличилось на 100
			go_RED($bot,100)                                     // бот покраснел
			ret(4)                                               // возвращаем 4
		}            
		//--------- дошли до сюда, значит впереди живой бот -------------------
		$min0 = bots[ $bot        , MINERAL ]  // определим количество минералов у бота
		$min1 = bots[ world[$x,$y], MINERAL ]  // определим количество минералов у потенциального обеда
		$hl   = bots[ world[$x,$y], HEALTH  ]  // определим энергию у потенциального обеда
		// если у бота минералов больше
		if ( $min0 >= $min1 )
			{
				bots[ $bot, MINERAL ] = $min0-$min1 // количество минералов у бота уменьшается на количество минералов у жертвы
				                                    // типа, стесал свои зубы о панцирь жертвы
				delete_bot( world[$x,$y] )          // удаляем жертву из списков
				$cl = 100 + ( $hl div 2 )           // количество энергии у бота прибавляется на 100+(половина от энергии жертвы)
				bots[ $bot , HEALTH ] =  bots[ $bot , HEALTH ] + $cl
				go_RED($bot,$cl)                    // бот краснеет
				ret(5)                              // возвращаем 5
			}
		//если у жертвы минералов больше ----------------------      
		bots[ $bot, MINERAL ] = 0 // то бот израсходовал все свои минералы на преодоление защиты
		$min1 = $min1-$min0       // у жертвы количество минералов тоже уменьшилось
    //------ если здоровья в 2 раза больше, чем минералов у жертвы  ------
    //------ то здоровьем проламываем минералы ---------------------------
		if ( bots[ $bot, HEALTH ] >= 2*$min1 )
		{
			delete_bot( world[$x,$y] )         // удаляем жертву из списков
			$cl = 100 + ( $hl div 2 )- 2*$min1 // вычисляем, сколько энергии смог получить бот
			bots[ $bot , HEALTH ] =  bots[ $bot , HEALTH ] + $cl
			go_RED($bot,$cl)                   // бот краснеет
			ret(5)                             // возвращаем 5
		}
     //--- если здоровья меньше, чем (минералов у жертвы)*2, то бот погибает от жертвы        
		bots[ world[$x,$y], MINERAL ] = $min1 - ( bots[ $bot, HEALTH ] div 2 )  // у жертвы минералы истраченны 
		bots[ $bot, HEALTH ] =  -10  // здоровье уходит в минус
		ret(5)                       // возвращаем 5
	}

//.======================  посмотреть ==================================================
fn  bot_see_bots($bot,$dr,$ra) // на входе ссылка на бота, направлелие и флажок(относительное или абсолютное направление) 
		{                      // на выходе  пусто - 2  стена - 3  органик - 4  бот - 5  родня - 6
			if $ra==0  // выясняем, есть ли что в этом  направлении (относительном)
				{ 
					$wc = is_anything_there_r($bot,$dr) 
				}
			else       // выясняем, есть ли что в этом  направлении (абсолютном)
				{ 
					$wc = is_anything_there_a($bot,$dr) 
				}
			if ( $wc == WC_EMPTY ) 
				{  // если ничего нет, то возвращаем 2
					ret(2) 
				}
			if ( $wc == WC_WALL )  
				{  // если стена, то возвращаем 3
					ret(3) 
				}  
			if ( bots[ $wc , LIVING ] <=  LV_ORGANIC_SINK ) 
				{  // если органика, то возвращаем 4
					ret(4) 
				} 
			if ( is_relative($bot,$wc) == 1)  
				{  // если родня, то возвращаем 6
					ret(6) 
				}
			else  
				{ // если какой-то бот, то возвращаем 5
					ret(5) 
				}             
        }
//======== атака на геном соседа, меняем случайны ген случайным образом  ===============
fn bot_gen_attack($bot)
	{   // вычисляем кто у нас перед ботом (используется только относительное направление вперед)
		$x = X_from_vektor_r( $bot, 0 )   
		$y = Y_from_vektor_r( $bot, 0 ) 
		if ( bots[world[$x,$y],LIVING] == LV_ALIVE ) // если там живой бот
		{  
			bots[ $bot, HEALTH ] =  bots[ $bot, HEALTH ] - 10 // то атакуюий бот теряет на атаку 10 энергии
			if( bots[ $bot, HEALTH ] > 0 )                    // если он при этом не умер
			{
				$ma= rand() div 520 // 0..63                 // то у жертвы случайным образом меняется один ген
				$mc= rand() div 520 // 0..63
				bots[world[$x,$y] ,$ma]=$mc
			}
		}
	}

  
//=================  отдать безвозместно, то есть даром    ==========
 fn  bot_give($bot, $dr, $ra) // на входе ссылка на бота, направлелие и флажок(относительное или абсолютное направление) 
	{                         // на выходе стена - 2 пусто - 3 органика - 4 удачно - 5
		if $ra == 0  // определяем координаты для относительного направления
		{ 
			$x = X_from_vektor_r( $bot, $dr )   
			$y = Y_from_vektor_r( $bot, $dr ) 
		}
		else         // определяем координаты для абсолютного направления
		{ 
			$x = X_from_vektor_a( $bot, $dr )
			$y = Y_from_vektor_a( $bot, $dr ) 
		} 
		if ( world[$x,$y] == WC_EMPTY )                        { ret(2) }  // если в этом направлении пусто, возвращаем 2
		if ( world[$x,$y] ==  WC_WALL )                        { ret(3) }  // если в этом направлении стена, возвращаем 3
		if ( bots[ world[$x,$y], LIVING ] <= LV_ORGANIC_SINK ) { ret(4) }  // если органика, возвращаем 4

	 //------- если мы здесь, то в данном направлении живой ----------
		$hlt0 = bots[ $bot , HEALTH  ]  // бот отдает четверть своей энергии
		$hlt  = $hlt0 div 4
		bots[ $bot ,        HEALTH  ] = $hlt0 - $hlt
		bots[ world[$x,$y], HEALTH  ] = bots[ world[$x,$y], HEALTH  ] + $hlt
      
		$min0 = bots[ $bot , MINERAL ]  // бот отдает четверть своих минералов
		if ( $min0>3 )                  // только если их у него не меньше 4
		{
			$min  = $min0 div 4
			bots[ $bot , MINERAL ] = $min0 - $min
			bots[ world[$x,$y], MINERAL] = bots[ world[$x,$y], MINERAL] + $min
			if ( bots[ world[$x,$y], MINERAL ] > 999 ) 
				{ bots[ world[$x,$y], MINERAL ] = 999 }
		}
		ret(5)
	}

  
// =======   генерация первого бота  =================================================================
 fn generate_Adam()
	{
	   //==========  0  ==============
	   // бот под номером 0
	   // это виртуальный бот, который не отображается на экране
	   // цепочка ботов начинается с него и на нем и заканчивается
		bots[ 0 , NEXT ]  = 1   // ссылка на предыдущего и следующего бота указывает на бота под номером 1
		bots[ 0 , PREV ]  = 1
	 
		//==========  1  ==============
		// бот номер 1 - это уже реальный бот
		bots[ 1 , NEXT ]  = 0   // ссылка на предыдущего и следующего бота указывает на бота под номером 0
		bots[ 1 , PREV ]  = 0

		bots[ 1 ,C_RED  ]  = 170  // задаем цвет бота
		bots[ 1 ,C_BLUE ]  = 170
		bots[ 1 ,C_GREEN ] = 170
		
		bots[ 1 ,HEALTH ] = 990      // энергия
		bots[ 1 ,MINERAL] = 0        // минералы
		bots[ 1 , LIVING] = LV_ALIVE // отмечаем, что бот живой
		bots[ 1 , DIRECT] = 5        // направление
		bots[ 1 ,X_COORD] = 90       // координаты бота
		bots[ 1 ,Y_COORD] = 48
		bots[ 1 ,  MPREV ] = 0      // бот не входит в многоклеточные цепочки, поэтому ссылки
		bots[ 1 ,  MNEXT ] = 0      // на предыдущего, следующего в многоклеточной цепочке пусты
		world[90,48] = 1            // даём ссылку на бота в массиве world[]
		$i=0
		while $i< MIND_SIZE         // заполняем геном командой 25 - фотосинтез
		{
			bots[1,$i]=25
			$i=$i+1
		}
		ret
	}
